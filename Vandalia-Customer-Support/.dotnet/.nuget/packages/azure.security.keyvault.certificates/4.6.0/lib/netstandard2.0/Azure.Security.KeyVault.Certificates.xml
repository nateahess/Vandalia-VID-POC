<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Security.KeyVault.Certificates</name>
    </assembly>
    <members>
        <member name="T:Azure.Security.KeyVault.Certificates.AdministratorContact">
            <summary>
            Details of an administrator of a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.AdministratorContact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.AdministratorContact" /> class.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.AdministratorContact.Email">
            <summary>
            Gets or sets the email address of the administrator.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.AdministratorContact.FirstName">
            <summary>
            Gets or sets the first name of the administrator.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.AdministratorContact.LastName">
            <summary>
            Gets or sets the last name of the administrator.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.AdministratorContact.Phone">
            <summary>
            Gets or sets the phone number of the administrator.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateClient">
            <summary>
            The CertificateClient provides synchronous and asynchronous methods to manage <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />s in Azure Key Vault. The client
            supports creating, retrieving, updating, deleting, purging, backing up, restoring, and listing the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />, along with managing
            certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" />s and <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" />s. The client also supports listing <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> for a soft delete
            enabled key vault.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">
            A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal.
            If you have a certificate <see cref="T:System.Uri" />, use <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier" /> to parse the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.VaultUri" /> and other information.
            You should validate that this URI references a valid Key Vault resource. See <see href="https://aka.ms/azsdk/blog/vault-uri" /> for details.
            </param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.KeyVault.Certificates.CertificateClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">
            A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal.
            If you have a certificate <see cref="T:System.Uri" />, use <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier" /> to parse the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.VaultUri" /> and other information.
            You should validate that this URI references a valid Key Vault resource. See <see href="https://aka.ms/azsdk/blog/vault-uri" /> for details.
            </param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Certificates.CertificateClientOptions" /> that allow to configure the management of the request sent to Key Vault.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateClient.VaultUri">
            <summary>
            Gets the <see cref="T:System.Uri" /> of the vault used to create this instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificate(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Starts a long running operation to create a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> in the vault with the specified certificate policy.
            </summary>
            <remarks>
            If no certificate with the specified name exists it will be created; otherwise, a new version of the existing certificate will be created.
            This operation requires the certificates/create permission.
            </remarks>
            <param name="certificateName">The name of the certificate to create.</param>
            <param name="policy">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> which governs the properties and lifecycle of the created certificate.</param>
            <param name="enabled">Specifies whether the certificate should be created in an enabled state. If null, the server default will be used.</param>
            <param name="tags">Tags to be applied to the created certificate.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> which contains details on the create operation, and can be used to retrieve updated status.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> or <paramref name="policy" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificateAsync(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Starts a long running operation to create a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> in the vault with the specified certificate policy.
            </summary>
            <remarks>
            If no certificate with the specified name exists it will be created; otherwise, a new version of the existing certificate will be created.
            This operation requires the certificates/create permission.
            </remarks>
            <param name="certificateName">The name of the certificate to create.</param>
            <param name="policy">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> which governs the properties and lifecycle of the created certificate.</param>
            <param name="enabled">Specifies whether the certificate should be created in an enabled state. If null, the server default will be used.</param>
            <param name="tags">Tags to be applied to the created certificate.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> which contains details on the create operation, and can be used to retrieve updated status.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> or <paramref name="policy" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DownloadCertificate(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.
            </summary>
            <remarks>
            Because <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> contains only the public key, this method attempts to download the managed secret
            that contains the full certificate. If you do not have permissions to get the secret,
            <see cref="T:Azure.RequestFailedException" /> will be thrown with an appropriate error response.
            If you want an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> with only the public key, instantiate it passing only the
            <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> property.
            This operation requires the certificates/get and secrets/get permissions.
            </remarks>
            <param name="certificateName">The name of the certificate to download.</param>
            <param name="version">Optional version of a certificate to download.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
            <exception cref="T:System.IO.InvalidDataException">The managed secret did not contain a certificate.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> is not supported.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Cannot create an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> on this platform.</exception>
            <exception cref="T:Azure.RequestFailedException">The request failed. See <see cref="P:Azure.RequestFailedException.ErrorCode" /> and the exception message for details.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DownloadCertificate(Azure.Security.KeyVault.Certificates.DownloadCertificateOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.
            </summary>
            <remarks>
            Because <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> contains only the public key, this method attempts to download the managed secret
            that contains the full certificate. If you do not have permissions to get the secret,
            <see cref="T:Azure.RequestFailedException" /> will be thrown with an appropriate error response.
            If you want an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> with only the public key, instantiate it passing only the
            <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> property.
            This operation requires the certificates/get and secrets/get permissions.
            </remarks>
            <param name="options">Options for downloading and creating an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="options" /> is null.</exception>
            <exception cref="T:System.IO.InvalidDataException">The managed secret did not contain a certificate.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> is not supported.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Cannot create an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> on this platform.</exception>
            <exception cref="T:Azure.RequestFailedException">The request failed. See <see cref="P:Azure.RequestFailedException.ErrorCode" /> and the exception message for details.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DownloadCertificateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.
            </summary>
            <remarks>
            Because <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> contains only the public key, this method attempts to download the managed secret
            that contains the full certificate. If you do not have permissions to get the secret,
            <see cref="T:Azure.RequestFailedException" /> will be thrown with an appropriate error response.
            If you want an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> with only the public key, instantiate it passing only the
            <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> property.
            This operation requires the certificates/get and secrets/get permissions.
            </remarks>
            <param name="certificateName">The name of the certificate to download.</param>
            <param name="version">Optional version of a certificate to download.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
            <exception cref="T:System.IO.InvalidDataException">The managed secret did not contain a certificate.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> is not supported.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Cannot create an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> on this platform.</exception>
            <exception cref="T:Azure.RequestFailedException">The request failed. See <see cref="P:Azure.RequestFailedException.ErrorCode" /> and the exception message for details.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DownloadCertificateAsync(Azure.Security.KeyVault.Certificates.DownloadCertificateOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.
            </summary>
            <remarks>
            Because <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> contains only the public key, this method attempts to download the managed secret
            that contains the full certificate. If you do not have permissions to get the secret,
            <see cref="T:Azure.RequestFailedException" /> will be thrown with an appropriate error response.
            If you want an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> with only the public key, instantiate it passing only the
            <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> property.
            This operation requires the certificates/get and secrets/get permissions.
            </remarks>
            <param name="options">Additional options for downloading and creating an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from the specified certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="options" /> is null.</exception>
            <exception cref="T:System.IO.InvalidDataException">The managed secret did not contain a certificate.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> is not supported.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Cannot create an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> on this platform.</exception>
            <exception cref="T:Azure.RequestFailedException">The request failed. See <see cref="P:Azure.RequestFailedException.ErrorCode" /> and the exception message for details.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificate(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the latest version of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> along with its <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" />. This operation requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to retrieve.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A response containing the certificate and policy as a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy" /> instance.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the latest version of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> along with its <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" />. This operation requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to retrieve.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A response containing the certificate and policy as a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy" /> instance.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersion(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a specific version of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />. This operation requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to retrieve.</param>
            <param name="version">The version of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to retrieve.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The requested <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a specific version of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />. This operation requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to retrieve.</param>
            <param name="version">The version of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to retrieve.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The requested <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificateProperties(Azure.Security.KeyVault.Certificates.CertificateProperties,System.Threading.CancellationToken)">
            <summary>
            Updates the specified <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> with the specified values for its mutable properties. This operation requires the certificates/update permission.
            </summary>
            <param name="properties">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> object with updated properties.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="properties" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificatePropertiesAsync(Azure.Security.KeyVault.Certificates.CertificateProperties,System.Threading.CancellationToken)">
            <summary>
            Updates the specified <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> with the specified values for its mutable properties. This operation requires the certificates/update permission.
            </summary>
            <param name="properties">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> object with updated properties.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="properties" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartDeleteCertificate(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes all versions of the specified <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />. If the vault is soft delete-enabled, the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> will be marked for permanent deletion
            and can be recovered with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificate(System.String,System.Threading.CancellationToken)" />, or purged with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate(System.String,System.Threading.CancellationToken)" />. This operation requires the certificates/delete permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to delete.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A <see cref="T:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation" /> to wait on this long-running operation.
            If the Key Vault is soft delete-enabled, you only need to wait for the operation to complete if you need to recover or purge the certificate;
            otherwise, the certificate is deleted automatically on the <see cref="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.ScheduledPurgeDate" />.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartDeleteCertificateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes all versions of the specified <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />. If the vault is soft delete-enabled, the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> will be marked for permanent deletion
            and can be recovered with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificate(System.String,System.Threading.CancellationToken)" />, or purged with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate(System.String,System.Threading.CancellationToken)" />. This operation requires the certificates/delete permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to delete.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A <see cref="T:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation" /> to wait on this long-running operation.
            If the Key Vault is soft delete-enabled, you only need to wait for the operation to complete if you need to recover or purge the certificate;
            otherwise, the certificate is deleted automatically on the <see cref="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.ScheduledPurgeDate" />.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificate(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves information about the specified deleted <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />. This operation is only applicable in vaults enabled for soft delete, and
            requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" />.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The details of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves information about the specified deleted <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />. This operation is only applicable in vaults enabled for soft delete, and
            requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" />.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The details of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificate(System.String,System.Threading.CancellationToken)">
            <summary>
            Recovers the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to its pre-deleted state. This operation is only applicable in vaults enabled for soft delete, and
            requires the certificates/recover permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" />.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation" /> to wait on this long-running operation.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Recovers the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to its pre-deleted state. This operation is only applicable in vaults enabled for soft delete, and
            requires the certificates/recover permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" />.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation" /> to wait on this long-running operation.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate(System.String,System.Threading.CancellationToken)">
            <summary>
            Permanently and irreversibly deletes the specified deleted certificate, without the possibility of recovery. This operation is only applicable in vaults enabled for soft delete, and
            requires the certificates/purge permission. The operation is not available if the DeletedCertificate.RecoveryLevel of the DeletedCertificate does not specify 'Purgeable'.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to permanently delete.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response from the service.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Permanently and irreversibly deletes the specified deleted certificate, without the possibility of recovery. This operation is only applicable in vaults enabled for soft delete, and
            requires the certificates/purge permission. The operation is not available if the DeletedCertificate.RecoveryLevel of the DeletedCertificate does not specify 'Purgeable'.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to permanently delete.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response from the service.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a backup of the certificate, including all versions, which can be used to restore the certificate to the state at the time of the backup in the case the certificate is deleted, or to
            restore the certificate to a different vault in the same region as the original value. This operation requires the certificate/backup permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to backup.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The certificate backup.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a backup of the certificate, including all versions, which can be used to restore the certificate to the state at the time of the backup in the case the certificate is deleted, or to
            restore the certificate to a different vault in the same region as the original value. This operation requires the certificate/backup permission.
            </summary>
            <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to backup.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The certificate backup.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.RestoreCertificateBackup(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Restores a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />, including all versions, from a backup created from the <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificateAsync(System.String,System.Threading.CancellationToken)" />. The backup must be restored
            to a vault in the same region as its original vault. This operation requires the certificate/restore permission.
            </summary>
            <param name="backup">The backup of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to restore.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The restored certificate and policy.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="backup" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.RestoreCertificateBackupAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Restores a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />, including all versions, from a backup created from the <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificateAsync(System.String,System.Threading.CancellationToken)" />. The backup must be restored
            to a vault in the same region as its original vault. This operation requires the certificate/restore permission.
            </summary>
            <param name="backup">The backup of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> to restore.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The restored certificate and policy.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="backup" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificate(Azure.Security.KeyVault.Certificates.ImportCertificateOptions,System.Threading.CancellationToken)">
            <summary>
            Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or ASCII PEM-format, and must contain the private key as well as the X.509 certificates. This operation requires the
            certificates/import permission.
            </summary>
            <param name="importCertificateOptions">The details of the certificate to import to the key vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The imported certificate and policy.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Name" /> of <paramref name="importCertificateOptions" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="importCertificateOptions" /> or <see cref="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Name" /> of <paramref name="importCertificateOptions" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificateAsync(Azure.Security.KeyVault.Certificates.ImportCertificateOptions,System.Threading.CancellationToken)">
            <summary>
            Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or ASCII PEM-format, and must contain the private key as well as the X.509 certificates. This operation requires the
            certificates/import permission.
            </summary>
            <param name="importCertificateOptions">The details of the certificate to import to the key vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The imported certificate and policy.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Name" /> of <paramref name="importCertificateOptions" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="importCertificateOptions" /> or <see cref="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Name" /> of <paramref name="importCertificateOptions" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetPropertiesOfCertificates(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled certificates in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificate(System.String,System.Threading.CancellationToken)" />.
            This operation requires the certificates/list permission.
            </summary>
            <param name="includePending">Specifies whether to include certificates in a pending state as well.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of certificate metadata.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetPropertiesOfCertificatesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled certificates in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificate(System.String,System.Threading.CancellationToken)" />.
            This operation requires the certificates/list permission.
            </summary>
            <param name="includePending">Specifies whether to include certificates in a pending state as well.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of certificate metadata.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetPropertiesOfCertificateVersions(System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled versions of the specified certificate in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersion(System.String,System.String,System.Threading.CancellationToken)" />.
            This operation requires the certificates/list permission.
            </summary>
            <param name="certificateName">The name of the certificate whose versions should be retrieved.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of the certificate's versions.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetPropertiesOfCertificateVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled versions of the specified certificate in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersion(System.String,System.String,System.Threading.CancellationToken)" />.
            This operation requires the certificates/list permission.
            </summary>
            <param name="certificateName">The name of the certificate whose versions should be retrieved.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of the certificate's versions.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificates(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Enumerates the deleted certificates in the vault. This operation is only available on soft delete-enabled vaults, and requires the certificates/list/get permissions.
            </summary>
            <param name="includePending">Specifies whether to include certificates in a delete pending state as well.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of deleted certificates.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificatesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Enumerates the deleted certificates in the vault. This operation is only available on soft delete-enabled vaults, and requires the certificates/list/get permissions.
            </summary>
            <param name="includePending">Specifies whether to include certificates in a delete pending state as well.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of deleted certificates.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificatePolicy(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/get permission.
            </summary>
            <param name="certificateName">The name of the certificate whose policy should be retrieved.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificatePolicyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/get permission.
            </summary>
            <param name="certificateName">The name of the certificate whose policy should be retrieved.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificatePolicy(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Threading.CancellationToken)">
            <summary>
            Updates the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/update permission.
            </summary>
            <param name="certificateName">The name of the certificate whose policy should be updated.</param>
            <param name="policy">The updated policy for the specified certificate.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated certificate policy.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificatePolicyAsync(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Threading.CancellationToken)">
            <summary>
            Updates the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/update permission.
            </summary>
            <param name="certificateName">The name of the certificate whose policy should be updated.</param>
            <param name="policy">The updated policy for the specified certificate.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated certificate policy.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuer(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)">
            <summary>
            Creates or replaces a certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> in the key vault. This operation requires the certificates/setissuers permission.
            </summary>
            <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to add or replace in the vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The created certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuer" /> or <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuerAsync(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)">
            <summary>
            Creates or replaces a certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> in the key vault. This operation requires the certificates/setissuers permission.
            </summary>
            <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to add or replace in the vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The created certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuer" /> or <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuer(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> from the vault. This operation requires the certificates/getissuers permission.
            </summary>
            <param name="issuerName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to retrieve.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The retrieved certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="issuerName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuerName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> from the vault. This operation requires the certificates/getissuers permission.
            </summary>
            <param name="issuerName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to retrieve.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The retrieved certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="issuerName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuerName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuer(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)">
            <summary>
            Updates the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> in the vault, only updating the specified fields, others will remain unchanged. This operation requires the certificates/setissuers permission.
            </summary>
            <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to update in the vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuer" /> or <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuerAsync(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)">
            <summary>
            Updates the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> in the vault, only updating the specified fields, others will remain unchanged. This operation requires the certificates/setissuers permission.
            </summary>
            <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to update in the vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuer" /> or <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" /> of <paramref name="issuer" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteIssuer(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> from the vault. This operation requires the certificates/deleteissuers permission.
            </summary>
            <param name="issuerName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to delete.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The deleted certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="issuerName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuerName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteIssuerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> from the vault. This operation requires the certificates/deleteissuers permission.
            </summary>
            <param name="issuerName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> to delete.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The deleted certificate issuer.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="issuerName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="issuerName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetPropertiesOfIssuers(System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all issuers in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuer(System.String,System.Threading.CancellationToken)" />.
            This operation requires the certificates/getissuers permission.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of certificate issuers' metadata.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetPropertiesOfIssuersAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all issuers in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuer(System.String,System.Threading.CancellationToken)" />.
            This operation requires the certificates/getissuers permission.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>An enumerable collection of certificate issuers' metadata.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateOperation(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> from the key vault. This operation requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the certificate for which an operation is pending.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The given certificate's current pending operation.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateOperationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> from the key vault. This operation requires the certificates/get permission.
            </summary>
            <param name="certificateName">The name of the certificate for which an operation is pending.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The given certificate's current pending operation.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="certificateName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificateName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.SetContacts(System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Certificates.CertificateContact},System.Threading.CancellationToken)">
            <summary>
            Sets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" />s for the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
            <param name="contacts">The certificate contacts for the vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated certificate contacts of the vault.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="contacts" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.SetContactsAsync(System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Certificates.CertificateContact},System.Threading.CancellationToken)">
            <summary>
            Sets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" />s for the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
            <param name="contacts">The certificate contacts for the vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The updated certificate contacts of the vault.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="contacts" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetContacts(System.Threading.CancellationToken)">
            <summary>
            Gets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" />s for the key vaults. This operation requires the certificates/managecontacts permission.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The certificate contacts of the vault.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetContactsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" />s for the key vaults. This operation requires the certificates/managecontacts permission.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The certificate contacts of the vault.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteContacts(System.Threading.CancellationToken)">
            <summary>
            Deletes all certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" />s from the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The certificate contacts deleted from the vault.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteContactsAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes all certificate <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" />s from the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The certificate contacts deleted from the vault.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.MergeCertificate(Azure.Security.KeyVault.Certificates.MergeCertificateOptions,System.Threading.CancellationToken)">
            <summary>
            Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the certificate/create permission.
            </summary>
            <param name="mergeCertificateOptions">The details of the certificate or certificate chain to merge into the key vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The merged certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mergeCertificateOptions" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClient.MergeCertificateAsync(Azure.Security.KeyVault.Certificates.MergeCertificateOptions,System.Threading.CancellationToken)">
            <summary>
            Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the certificate/create permission.
            </summary>
            <param name="mergeCertificateOptions">The details of the certificate or certificate chain to merge into the key vault.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The merged certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mergeCertificateOptions" /> is null.</exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateClientOptions">
            <summary>
            Options that allow you to configure the requests sent to Key Vault.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.CertificateClientOptions.LatestVersion">
            <summary>
            The latest service version supported by this client library.
            For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion">
            <summary>
            The versions of Azure Key Vault supported by this client
            library.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion.V7_0">
            <summary>
            The Key Vault API version 7.0.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion.V7_1">
            <summary>
            The Key Vault API version 7.1.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion.V7_2">
            <summary>
            The Key Vault API version 7.2.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion.V7_3">
            <summary>
            The Key Vault API version 7.3.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion.V7_4">
            <summary>
            The Key Vault API version 7.4.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion.V7_5">
            <summary>
            The Key Vault API version 7.5.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateClientOptions.Version">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion" /> of the service API used when
            making requests. For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateClientOptions.#ctor(Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClientOptions" />
            class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateClientOptions.DisableChallengeResourceVerification">
            <summary>
            Gets or sets whether to disable verification that the authentication challenge resource matches the Key Vault domain.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateContact">
            <summary>
            A contact for certificate management issues for a key vault.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" /> class.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateContact.Email">
            <summary>
            Gets or sets the email address of the contact.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateContact.Name">
            <summary>
            Gets or sets the name of the contact.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateContact.Phone">
            <summary>
            Gets or sets the phone number of the contact.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateContentType">
            <summary>
            Content type of the certificate when the managed secret is downloaded using a <c>SecretClient</c>.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateContentType.Pkcs12">
            <summary>
            Gets a value indicating that content is downloaded in pkcs12 (PFX) format.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateContentType.Pem">
            <summary>
            Gets a value indicating that content is downloaded in PEM format.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.op_Equality(Azure.Security.KeyVault.Certificates.CertificateContentType,Azure.Security.KeyVault.Certificates.CertificateContentType)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.op_Inequality(Azure.Security.KeyVault.Certificates.CertificateContentType,Azure.Security.KeyVault.Certificates.CertificateContentType)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.op_Implicit(System.String)~Azure.Security.KeyVault.Certificates.CertificateContentType">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.Equals(Azure.Security.KeyVault.Certificates.CertificateContentType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateContentType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateIssuer">
            <summary>
            A certificate issuer used to sign certificates managed by Azure Key Vault.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateIssuer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> class.
            You can use this constructor to initialize a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> for
            <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuer(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)" /> or
            <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuerAsync(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)" />.
            </summary>
            <param name="name">The name of the issuer, including values from <see cref="T:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames" />.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateIssuer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> class.
            You can use this constructor to initialize a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> for
            <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuer(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)" /> or
            <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuerAsync(Azure.Security.KeyVault.Certificates.CertificateIssuer,System.Threading.CancellationToken)" />.
            </summary>
            <param name="name">The name of the issuer, including values from <see cref="T:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames" />.</param>
            <param name="provider">The provider name of the certificate issuer.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> or <paramref name="provider" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="provider" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Id">
            <summary>
            Gets the unique identifier of the certificate issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name">
            <summary>
            Gets the name of the certificate issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Provider">
            <summary>
            Gets or sets the provider name of the certificate issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.AccountId">
            <summary>
            Gets or sets the account identifier or username used to authenticate to the certificate issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Password">
            <summary>
            Gets or sets the password or key used to authenticate to the certificate issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.OrganizationId">
            <summary>
            Gets or sets the organizational identifier for the issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.AdministratorContacts">
            <summary>
            Gets a list of contacts who administer the certificate issuer account.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.CreatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate was created.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.UpdatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate was updated.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Enabled">
            <summary>
            Gets or sets a value indicating whether the issuer can currently be used to issue certificates. If null, the server default will be used.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName">
            <summary>
            Elliptic Curve Cryptography (ECC) curve names.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.P256">
            <summary>
            Gets the NIST P-256 elliptic curve, AKA SECG curve SECP256R1
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.P384">
            <summary>
            Gets the NIST P-384 elliptic curve, AKA SECG curve SECP384R1.
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.P521">
            <summary>
            Gets the NIST P-521 elliptic curve, AKA SECG curve SECP521R1.
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.P256K">
            <summary>
            Gets the SECG SECP256K1 elliptic curve.
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.op_Equality(Azure.Security.KeyVault.Certificates.CertificateKeyCurveName,Azure.Security.KeyVault.Certificates.CertificateKeyCurveName)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.op_Inequality(Azure.Security.KeyVault.Certificates.CertificateKeyCurveName,Azure.Security.KeyVault.Certificates.CertificateKeyCurveName)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.op_Implicit(System.String)~Azure.Security.KeyVault.Certificates.CertificateKeyCurveName">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.Equals(Azure.Security.KeyVault.Certificates.CertificateKeyCurveName)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyCurveName.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateKeyType">
            <summary>
            Supported JsonWebKey key types (kty)
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyType.Ec">
            <summary>
            An Elliptic Curve Cryptographic (ECC) algorithm.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyType.EcHsm">
            <summary>
            An Elliptic Curve Cryptographic (ECC) algorithm backed by HSM.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyType.Rsa">
            <summary>
            An RSA cryptographic algorithm.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyType.RsaHsm">
            <summary>
            An RSA cryptographic algorithm backed by HSM.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.op_Equality(Azure.Security.KeyVault.Certificates.CertificateKeyType,Azure.Security.KeyVault.Certificates.CertificateKeyType)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.op_Inequality(Azure.Security.KeyVault.Certificates.CertificateKeyType,Azure.Security.KeyVault.Certificates.CertificateKeyType)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.op_Implicit(System.String)~Azure.Security.KeyVault.Certificates.CertificateKeyType">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyType" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.Equals(Azure.Security.KeyVault.Certificates.CertificateKeyType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage">
            <summary>
            Supported usages of a certificate key.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.DigitalSignature">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used as a digital signatures.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.NonRepudiation">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used for authentication.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.KeyEncipherment">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used for key encryption.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.DataEncipherment">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used for data encryption.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.KeyAgreement">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used to determine key agreement, such as a key created using the Diffie-Hellman key agreement algorithm.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.KeyCertSign">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used to sign certificates.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.CrlSign">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used to sign a certificate revocation list.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.EncipherOnly">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used for encryption only.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.DecipherOnly">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> indicating that the certificate key can be used for decryption only.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.op_Equality(Azure.Security.KeyVault.Certificates.CertificateKeyUsage,Azure.Security.KeyVault.Certificates.CertificateKeyUsage)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.op_Inequality(Azure.Security.KeyVault.Certificates.CertificateKeyUsage,Azure.Security.KeyVault.Certificates.CertificateKeyUsage)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.op_Implicit(System.String)~Azure.Security.KeyVault.Certificates.CertificateKeyUsage">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateKeyUsage" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.Equals(Azure.Security.KeyVault.Certificates.CertificateKeyUsage)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateKeyUsage.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateModelFactory">
            <summary>
            Model factory that enables mocking for the Key Vault Certificates library.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.IssuerProperties(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.IssuerProperties" /> for mocking purposes.
            </summary>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.IssuerProperties.Id" /> property.</param>
            <param name="name">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.IssuerProperties.Name" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.IssuerProperties" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.CertificateIssuer(Azure.Security.KeyVault.Certificates.IssuerProperties,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> for mocking purposes.
            </summary>
            <param name="properties">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Id" />, <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Name" />, and <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.Provider" /> properties.</param>
            <param name="createdOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.CreatedOn" /> property.</param>
            <param name="updatedOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateIssuer.UpdatedOn" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.CertificateOperationError(System.String,System.String,Azure.Security.KeyVault.Certificates.CertificateOperationError)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperationError" /> for mocking purposes.
            </summary>
            <param name="code">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationError.Code" /> property.</param>
            <param name="message">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationError.Message" /> property.</param>
            <param name="innerError">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationError.InnerError" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperationError" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.CertificateOperationProperties(System.Uri,System.String,System.Uri,System.String,System.String,System.Nullable{System.Boolean},System.Byte[],System.Boolean,System.String,System.String,System.String,System.String,Azure.Security.KeyVault.Certificates.CertificateOperationError)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperationProperties" /> for mocking purposes.
            </summary>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Id" /> property.</param>
            <param name="name">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Name" /> property.</param>
            <param name="vaultUri">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.VaultUri" /> property.</param>
            <param name="issuerName">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.IssuerName" /> property.</param>
            <param name="certificateType">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.CertificateType" /> property.</param>
            <param name="certificateTransparency">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.CertificateTransparency" /> property.</param>
            <param name="csr">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Csr" /> property.</param>
            <param name="cancellationRequested">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.CancellationRequested" /> property.</param>
            <param name="requestId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.RequestId" /> property.</param>
            <param name="status">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Status" /> property.</param>
            <param name="statusDetails">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.StatusDetails" /> property.</param>
            <param name="target">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Target" /> property.</param>
            <param name="error">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Error" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperationProperties" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.CertificatePolicy(System.String,Azure.Security.KeyVault.Certificates.SubjectAlternativeNames,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> for mocking purposes.
            </summary>
            <param name="subject">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Subject" /> property.</param>
            <param name="subjectAlternativeNames">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.SubjectAlternativeNames" /> property.</param>
            <param name="issuerName">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.IssuerName" /> property.</param>
            <param name="createdOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.CreatedOn" /> property.</param>
            <param name="updatedOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.UpdatedOn" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.CertificateProperties(System.Uri,System.String,System.Uri,System.String,System.Byte[],System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> for mocking purposes.
            </summary>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Id" /> property.</param>
            <param name="name">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> property.</param>
            <param name="vaultUri">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.VaultUri" /> property.</param>
            <param name="version">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Version" /> property.</param>
            <param name="x509thumbprint">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.X509Thumbprint" /> property.</param>
            <param name="notBefore">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.NotBefore" /> property.</param>
            <param name="expiresOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.ExpiresOn" /> property.</param>
            <param name="createdOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.CreatedOn" /> property.</param>
            <param name="updatedOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.UpdatedOn" /> property.</param>
            <param name="recoveryLevel">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.RecoveryLevel" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.CertificateProperties(System.Uri,System.String,System.Uri,System.String,System.Byte[],System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> for mocking purposes.
            </summary>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Id" /> property.</param>
            <param name="name">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name" /> property.</param>
            <param name="vaultUri">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.VaultUri" /> property.</param>
            <param name="version">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Version" /> property.</param>
            <param name="x509thumbprint">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.X509Thumbprint" /> property.</param>
            <param name="notBefore">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.NotBefore" /> property.</param>
            <param name="expiresOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.ExpiresOn" /> property.</param>
            <param name="createdOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.CreatedOn" /> property.</param>
            <param name="updatedOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.UpdatedOn" /> property.</param>
            <param name="recoveryLevel">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.RecoveryLevel" /> property.</param>
            <param name="recoverableDays">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateProperties.RecoverableDays" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.DeletedCertificate(Azure.Security.KeyVault.Certificates.CertificateProperties,System.Uri,System.Uri,System.Byte[],Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Uri,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> for mocking purposes.
            </summary>
            <param name="properties">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Properties" /> property.</param>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.KeyId" /> property.</param>
            <param name="secretId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.SecretId" /> property.</param>
            <param name="cer">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> property.</param>
            <param name="policy">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy.Policy" /> property.</param>
            <param name="recoveryId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.RecoveryId" /> property.</param>
            <param name="deletedOn">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.DeletedOn" /> property.</param>
            <param name="scheduledPurgeDate">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.ScheduledPurgeDate" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.KeyVaultCertificate(Azure.Security.KeyVault.Certificates.CertificateProperties,System.Uri,System.Uri,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> for mocking purposes.
            </summary>
            <param name="properties">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Properties" /> property.</param>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.KeyId" /> property.</param>
            <param name="secretId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.SecretId" /> property.</param>
            <param name="cer">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateModelFactory.KeyVaultCertificateWithPolicy(Azure.Security.KeyVault.Certificates.CertificateProperties,System.Uri,System.Uri,System.Byte[],Azure.Security.KeyVault.Certificates.CertificatePolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy" /> for mocking purposes.
            </summary>
            <param name="properties">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Properties" /> property.</param>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.KeyId" /> property.</param>
            <param name="secretId">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.SecretId" /> property.</param>
            <param name="cer">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> property.</param>
            <param name="policy">Sets the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy.Policy" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy" /> for mocking purposes.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateOperation">
            <summary>
            A long running poller operation which can be used to track the status of a pending key vault certificate operation.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.#ctor(Azure.Security.KeyVault.Certificates.CertificateClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> class.
            You must call <see cref="M:Azure.Security.KeyVault.Certificates.CertificateOperation.UpdateStatus(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Certificates.CertificateOperation.UpdateStatusAsync(System.Threading.CancellationToken)" /> before you can get the <see cref="P:Azure.Security.KeyVault.Certificates.CertificateOperation.Value" />.
            </summary>
            <param name="client">A <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" /> for the Key Vault where the operation was started.</param>
            <param name="name">The name of the certificate being created.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperation.Properties">
            <summary>
            Gets the properties of the pending certificate operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperation.HasCompleted">
            <summary>
            Gets a value indicating whether the operation has reached a terminal state.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperation.HasValue">
            <summary>
            Gets a value indicating whether the Value property can be safely accessed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperation.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Updates the status of the certificate operation.
            This operation requires the certificates/get permission.
            </summary>
            <remarks>
            This operation requires the certificates/get permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The raw response of the poll operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Updates the status of the certificate operation.
            </summary>
            <remarks>
            This operation requires the certificates/get permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The raw response of the poll operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.Cancel(System.Threading.CancellationToken)">
            <summary>
            Cancels a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault. This operation requires the certificates/update permission.
            </summary>
            <remarks>
            This operation requires the certificates/update permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.CancelAsync(System.Threading.CancellationToken)">
            <summary>
            Cancels a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault. This operation requires the certificates/update permission.
            </summary>
            <remarks>
            This operation requires the certificates/update permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> to track the service request.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.Delete(System.Threading.CancellationToken)">
            <summary>
            Deletes a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault. This operation requires the certificates/delete permission.
            </summary>
            <remarks>
            This operation requires the certificates/update permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateOperation.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault. This operation requires the certificates/delete permission.
            </summary>
            <remarks>
            This operation requires the certificates/update permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> to track the service request.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateOperationError">
            <summary>
            An error encountered during the processing of a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationError.Code">
            <summary>
            Gets the error code of the specified error.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationError.Message">
            <summary>
            Gets a message containing details of the encountered error.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationError.InnerError">
            <summary>
            Gets an underlying error - if one exists - for the current error.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateOperationProperties">
            <summary>
            Properties pertaining to the status of a certificate operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Id">
            <summary>
            Gets the identifier of the certificate operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Name">
            <summary>
            Gets the name of the certificate to which the operation applies.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.VaultUri">
            <summary>
            Gets the <see cref="T:System.Uri" /> of the vault executing the certificate operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.IssuerName">
            <summary>
            Gets the name of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" /> for the certificate to create.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.CertificateType">
            <summary>
            Gets the type of the certificate to create.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.CertificateTransparency">
            <summary>
            Gets a value indicating whether the certificate will be published to the certificate transparency list when created.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Csr">
            <summary>
            Gets the certificate signing request (CSR) that is being used in the certificate operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.CancellationRequested">
            <summary>
            Gets a value indicating whether a cancellation has been requested for the operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.RequestId">
            <summary>
            Gets the request identifier of the certificate operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Status">
            <summary>
            Gets the current status of the operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.StatusDetails">
            <summary>
            Gets extended details on the status of the operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Target">
            <summary>
            Gets the location which will contain the result of the certificate operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateOperationProperties.Error">
            <summary>
            Gets any errors encountered during the processing of the certificate operation.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificatePolicy">
            <summary>
            A policy which governs the lifecycle a properties of a certificate managed by Azure Key Vault.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicy.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> class.
            </summary>
            <param name="issuerName">The name of an issuer for the certificate, including values from <see cref="T:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames" />.</param>
            <param name="subject">The subject name of the certificate, such as "CN=contoso.com".</param>
            <exception cref="T:System.ArgumentException"><paramref name="subject" /> or <paramref name="issuerName" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject" /> or <paramref name="issuerName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicy.#ctor(System.String,Azure.Security.KeyVault.Certificates.SubjectAlternativeNames)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> class.
            </summary>
            <param name="issuerName">The name of an issuer for the certificate, including values from <see cref="T:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames" />.</param>
            <param name="subjectAlternativeNames">The subject alternative names (SANs) of the certificate.</param>
            <exception cref="T:System.ArgumentException"><paramref name="issuerName" /> is empty or <paramref name="subjectAlternativeNames" /> contains empty collection properties.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="subjectAlternativeNames" /> or <paramref name="issuerName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicy.#ctor(System.String,System.String,Azure.Security.KeyVault.Certificates.SubjectAlternativeNames)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> class.
            </summary>
            <param name="issuerName">The name of an issuer for the certificate, including values from <see cref="T:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames" />.</param>
            <param name="subject">The subject name of the certificate, such as "CN=contoso.com".</param>
            <param name="subjectAlternativeNames">The subject alternative names (SANs) of the certificate.</param>
            <exception cref="T:System.ArgumentException"><paramref name="subject" /> or <paramref name="issuerName" /> is empty, or <paramref name="subjectAlternativeNames" /> contains empty collection properties.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject" />, <paramref name="issuerName" />, or <paramref name="subjectAlternativeNames" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicy.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> class to pass to
             <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificate(Azure.Security.KeyVault.Certificates.ImportCertificateOptions,System.Threading.CancellationToken)" /> or
             <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificateAsync(Azure.Security.KeyVault.Certificates.ImportCertificateOptions,System.Threading.CancellationToken)" />.
             </summary>
             <remarks>
             <para>
             Use this constructor if, for example, you want to import a PEM-encoded certificate. The <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.IssuerName" /> will be
             <see cref="F:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames.Unknown" /> and the <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Subject" /> and <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.SubjectAlternativeNames" /> will
             be parsed from the imported certificate.
             <code snippet="Snippet:CertificateClientLiveTests_VerifyImportCertificatePem" language="csharp">
             byte[] certificateBytes = File.ReadAllBytes("certificate.pem");
            
             ImportCertificateOptions options = new ImportCertificateOptions(certificateName, certificateBytes)
             {
                 Policy = new CertificatePolicy
                 {
                     ContentType = CertificateContentType.Pem
                 }
             };
             </code>
             </para>
             <para>
             You must use one of the other constructors to pass an instance to
             <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificate(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> or
             <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificateAsync(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             because <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.IssuerName" /> and one of <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Subject" /> or <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.SubjectAlternativeNames" /> are required.
             </para>
             </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Default">
            <summary>
            Gets a new <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> suitable for self-signed certificate requests
            with the <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Subject" /> "CN=DefaultPolicy". To change the Subject, create a new instance
            using one of the constructors.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.KeyType">
            <summary>
            Gets or sets the type of backing key to be generated when issuing new certificates.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.ReuseKey">
            <summary>
            Gets or sets a value indicating whether the certificate key should be reused when rotating the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Exportable">
            <summary>
            Gets or sets a value indicating whether the certificate key is exportable from the vault or secure certificate store.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.KeyCurveName">
            <summary>
            Gets or sets the curve which back an Elliptic Curve (EC) key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.KeySize">
            <summary>
            Gets or sets the size of the RSA key. The value must be a valid RSA key length such as 2048 or 4092.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Subject">
            <summary>
            Gets the subject name of a certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.SubjectAlternativeNames">
            <summary>
            Gets the subject alternative names (SANs) of a certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.IssuerName">
            <summary>
            Gets the name of an issuer for a certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.ContentType">
            <summary>
            Gets or sets the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> of the certificate.
            </summary>
            <remarks>
            Set to <see cref="P:Azure.Security.KeyVault.Certificates.CertificateContentType.Pkcs12" /> when <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> contains your raw PKCS#12/PFX bytes,
            or to <see cref="P:Azure.Security.KeyVault.Certificates.CertificateContentType.Pem" /> when <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer" /> contains your ASCII PEM-encoded bytes.
            If not specified, <see cref="P:Azure.Security.KeyVault.Certificates.CertificateContentType.Pkcs12" /> is assumed.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.CertificateType">
            <summary>
            Gets or sets the certificate type of a certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.CertificateTransparency">
            <summary>
            Gets or sets a value indicating whether a certificate should be published to the certificate transparency list when created.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.ValidityInMonths">
            <summary>
            Gets or sets the validity period for a certificate in months.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.Enabled">
            <summary>
            Gets or sets a value indicating whether the certificate is currently enabled. If null, the server default will be used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.UpdatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate was updated.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.CreatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate was created.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.KeyUsage">
            <summary>
            Gets the allowed usages for the key of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.EnhancedKeyUsage">
            <summary>
            Gets the allowed enhanced key usages (EKUs) of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.LifetimeActions">
            <summary>
            Gets the actions to be executed at specified times in the certificates lifetime.
            Currently, only a single <see cref="T:Azure.Security.KeyVault.Certificates.LifetimeAction" /> is allowed.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction">
            <summary>
            An action that will be executed.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.AutoRenew">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> that will auto-renew a certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.EmailContacts">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> action that will email certificate contacts.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.op_Equality(Azure.Security.KeyVault.Certificates.CertificatePolicyAction,Azure.Security.KeyVault.Certificates.CertificatePolicyAction)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.op_Inequality(Azure.Security.KeyVault.Certificates.CertificatePolicyAction,Azure.Security.KeyVault.Certificates.CertificatePolicyAction)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.op_Implicit(System.String)~Azure.Security.KeyVault.Certificates.CertificatePolicyAction">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.Equals(Azure.Security.KeyVault.Certificates.CertificatePolicyAction)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificatePolicyAction.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.CertificateProperties">
            <summary>
            <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> contains identity and other basic properties of a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> class.
            </summary>
            <param name="name">The name of the certificate.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.CertificateProperties.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateProperties" /> class.
            </summary>
            <param name="id">The identifier of the certificate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Id">
            <summary>
            Gets the identifier of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Name">
            <summary>
            Gets the name of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.VaultUri">
            <summary>
            Gets the <see cref="T:System.Uri" /> of the vault in which the certificate is stored.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Version">
            <summary>
            Gets the version of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.X509Thumbprint">
            <summary>
            Gets the digital thumbprint of the certificate which can be used to uniquely identify it.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.X509ThumbprintString">
            <summary>
            Gets the digital thumbprint of the certificate as a hexadecimal string which can be used to uniquely identify it.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Tags">
            <summary>
            Gets the tags applied to the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.Enabled">
            <summary>
            Gets or sets a value indicating whether the certificate is currently enabled. If null, the server default will be used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.NotBefore">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate will be valid.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.ExpiresOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate will expire.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.CreatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate was created.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.UpdatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate was updated.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.RecoverableDays">
            <summary>
            Gets the number of days a certificate is retained before being deleted for a soft delete-enabled Key Vault.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.CertificateProperties.RecoveryLevel">
            <summary>
            Gets the recovery level currently in effect for certificates in the Key Vault.
            If <c>Purgeable</c>, the certificates can be permanently deleted by an authorized user;
            otherwise, only the service can purge the certificates at the end of the retention interval.
            </summary>
            <value>Possible values include <c>Purgeable</c>, <c>Recoverable+Purgeable</c>, <c>Recoverable</c>, and <c>Recoverable+ProtectedSubscription</c>.</value>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation">
            <summary>
            A long-running operation for <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartDeleteCertificate(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartDeleteCertificateAsync(System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.Value">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" />.
            You should await <see cref="M:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" /> before attempting to purge or recover a certificate in this pending state.
            </summary>
            <remarks>
            Azure Key Vault will return a <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> immediately but may take time to actually delete the certificate if soft-delete is enabled.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.DeletedCertificate">
            <summary>
            A deleted <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.RecoveryId">
            <summary>
            Gets the identifier of the deleted certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.DeletedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the certificate was deleted.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DeletedCertificate.ScheduledPurgeDate">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> for when the deleted certificate will be purged.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.DownloadCertificateOptions">
            <summary>
            Additional options for downloading and creating an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.DownloadCertificateOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.DownloadCertificateOptions" /> class.
            </summary>
            <param name="certificateName">The name of the certificate to download.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DownloadCertificateOptions.CertificateName">
            <summary>
            Gets the name of the certificate to download.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DownloadCertificateOptions.Version">
            <summary>
            Gets or sets the optional version of a certificate to download.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.DownloadCertificateOptions.KeyStorageFlags">
            <summary>
            Gets or sets a combination of the enumeration values that control where and how to import the certificate.
            The default is <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet" />.
            </summary>
            <remarks>
            These <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> are passed to <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
            when constructing the certificate. The default is <see cref="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet" /> and behavior may vary across platforms.
            There may also be new values supported when targeting newer versions of .NET such as <c>EphemeralKeySet</c> that you set in this property
            to use when creating an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.ImportCertificateOptions">
            <summary>
            Options for a certificate to be imported into Azure Key Vault.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.ImportCertificateOptions" /> class.
            </summary>
            <param name="name">A name for the imported certificate.</param>
            <param name="certificate">The PFX or ASCII PEM-formatted value of the certificate containing both the X.509 certificates and the private key.</param>
            <remarks>
            If importing an ASCII PEM-formatted certificate, you must also create a <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> with <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.ContentType" />
            set to <see cref="P:Azure.Security.KeyVault.Certificates.CertificateContentType.Pem" />, and set the <see cref="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Policy" /> property. If the <see cref="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Policy" /> property or
            <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.ContentType" /> property is not set, <see cref="P:Azure.Security.KeyVault.Certificates.CertificateContentType.Pkcs12" /> is assumed and the import will fail.
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="certificate" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Name">
            <summary>
            Gets the name of the certificate to import.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Certificate">
            <summary>
            Gets the PFX or ASCII PEM-formatted value of the certificate containing both the X.509 certificates and the private key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Policy">
            <summary>
            Gets or sets the policy which governs the lifecycle of the imported certificate and its properties when it is rotated.
            </summary>
            <remarks>
            If setting the policy, <see cref="P:Azure.Security.KeyVault.Certificates.CertificatePolicy.ContentType" /> must be set to a valid <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContentType" /> value.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Password">
            <summary>
            Gets or sets the password protecting the certificate specified in the Value.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether the merged certificate should be enabled. If null, the server default will be used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.ImportCertificateOptions.Tags">
            <summary>
            Gets the tags to be applied to the imported certificate. Although this collection cannot be set, it can be modified
             or initialized with a <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/how-to-initialize-a-dictionary-with-a-collection-initializer">collection initializer</see>.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.IssuerProperties">
            <summary>
            Properties of a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateIssuer" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.IssuerProperties.Id">
            <summary>
            Gets the identifier of the certificate issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.IssuerProperties.Name">
            <summary>
            Gets the name of the certificate issuer.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.IssuerProperties.Provider">
            <summary>
            Gets or sets the provider name of the certificate issuer.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate">
            <summary>
            An Azure Key Vault certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Id">
            <summary>
            Gets the identifier of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Name">
            <summary>
            Gets the name of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.KeyId">
            <summary>
            Gets the identifier of the Key Vault Key backing the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.SecretId">
            <summary>
            Gets the identifier of the Key Vault Secret which contains the PEM of PFX formatted content of the certificate and its private key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Properties">
            <summary>
            Gets additional properties of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificate.Cer">
            <summary>
            Gets the CER formatted public X509 certificate.
            </summary>
            <remarks>
            This property contains only the public key.
            If you must retrieve the key pair including the private key instead of performing cryptographic operations in Azure Key Vault, see the sample:
            <see href="https://docs.microsoft.com/samples/azure/azure-sdk-for-net/get-certificate-private-key" />
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier">
            <summary>
            Information about a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> parsed from a <see cref="T:System.Uri" />.
            You can use this information when calling methods of a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.#ctor(System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier" /> class.
            </summary>
            <param name="id">The <see cref="T:System.Uri" /> to a certificate or deleted certificate.</param>
            <exception cref="T:System.ArgumentException"><paramref name="id" /> is not a valid Key Vault certificate ID.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> is null.</exception>
            <remarks>
            Successfully parsing the given <see cref="T:System.Uri" /> does not guarantee that the <paramref name="id" /> is a valid Key Vault certificate identifier:
            only that it contains the necessary number of path parts that look like a Key Vault certificate identifier. If the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.VaultUri" /> references
            a valid Key Vault, the service will return an error if the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Name" /> and <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Version" /> do not specify a valid certificate.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.SourceId">
            <summary>
            Gets the source <see cref="T:System.Uri" /> passed to <see cref="M:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.#ctor(System.Uri)" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.VaultUri">
            <summary>
            Gets the <see cref="T:System.Uri" /> of the Key Vault.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Name">
            <summary>
            Gets the name of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Version">
            <summary>
            Gets the optional version of the certificate.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.TryCreate(System.Uri,Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier@)">
            <summary>
            Tries to create a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier" /> from the given <paramref name="id" />.
            </summary>
            <param name="id">A <see cref="T:System.Uri" /> to a Key Vault certificate with or without a version.</param>
            <param name="identifier">A <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier" /> from the given <paramref name="id" /> if valid; otherwise, an empty structure if invalid.</param>
            <returns>True if the <see cref="T:System.Uri" /> contains a <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.VaultUri" />, <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Name" />, and optional <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Version" />; otherwise, false.</returns>
            <remarks>
            Successfully parsing the given <see cref="T:System.Uri" /> does not guarantee that the <paramref name="id" /> is a valid Key Vault certificate identifier:
            only that it contains the necessary number of path parts that look like a Key Vault certificate identifier. If the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.VaultUri" /> references
            a valid Key Vault, the service will return an error if the <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Name" /> and <see cref="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Version" /> do not specify a valid certificate.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.Equals(Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.KeyVaultCertificateIdentifier.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy">
            <summary>
            A <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> along with its <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.KeyVaultCertificateWithPolicy.Policy">
            <summary>
            Gets the current policy for the certificate.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.LifetimeAction">
            <summary>
            An action to be executed at a prescribed time in a certificates lifecycle
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.LifetimeAction.#ctor(Azure.Security.KeyVault.Certificates.CertificatePolicyAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.LifetimeAction" /> class.
            </summary>
            <param name="action">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> to be performed.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.LifetimeAction.DaysBeforeExpiry">
            <summary>
            Gets or sets the action should be performed the specified number of days before the certificate will expire.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.LifetimeAction.LifetimePercentage">
            <summary>
            Gets or sets the action should be performed when the certificate reaches the specified percentage of its lifetime. Valid values include 1-99.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.LifetimeAction.Action">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicyAction" /> to be performed.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.MergeCertificateOptions">
            <summary>
            Options for certificates to be merged into Azure Key Vault.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.MergeCertificateOptions.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.MergeCertificateOptions" /> class.
            </summary>
            <param name="name">The name of the certificate.</param>
            <param name="x509Certificates">The certificate or certificate chain to merge.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="x509Certificates" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.MergeCertificateOptions.Name">
            <summary>
            Gets the name of the certificate.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.MergeCertificateOptions.X509Certificates">
            <summary>
            Gets the certificate or certificate chain to merge.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.MergeCertificateOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether the merged certificate should be enabled. If null, the server default will be used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.MergeCertificateOptions.Tags">
            <summary>
            Gets the tags to be applied to the merged certificate. Although this collection cannot be set, it can be modified
             or initialized with a <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/how-to-initialize-a-dictionary-with-a-collection-initializer">collection initializer</see>.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation">
            <summary>
            A long-running operation for <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificate(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificateAsync(System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.Value">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> of the certificate being recovered.
            You should await <see cref="M:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" /> before attempting to use a certificate in this pending state.
            </summary>
            <remarks>
            Azure Key Vault will return a <see cref="T:Azure.Security.KeyVault.Certificates.KeyVaultCertificate" /> immediately but may take time to actually recover the deleted certificate if soft-delete is enabled.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.SubjectAlternativeNames">
            <summary>
            A collection of subject alternative names (SANs) for a X.509 certificate. SANs can be DNS entries, emails, or unique principal names.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Certificates.SubjectAlternativeNames.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Certificates.CertificateContact" /> class.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.SubjectAlternativeNames.DnsNames">
            <summary>
            Gets a collection of DNS names.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.SubjectAlternativeNames.Emails">
            <summary>
            Gets a collection of email addresses.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Certificates.SubjectAlternativeNames.UserPrincipalNames">
            <summary>
            Gets a collection of user principal names (UPNs).
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames">
            <summary>
            Well known issuer names you can pass to <see cref="M:Azure.Security.KeyVault.Certificates.CertificatePolicy.#ctor(System.String,System.String)" />, <see cref="M:Azure.Security.KeyVault.Certificates.CertificatePolicy.#ctor(System.String,Azure.Security.KeyVault.Certificates.SubjectAlternativeNames)" />, or <see cref="M:Azure.Security.KeyVault.Certificates.CertificatePolicy.#ctor(System.String,System.String,Azure.Security.KeyVault.Certificates.SubjectAlternativeNames)" />.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames.Self">
            <summary>
            Create a self-issued certificate.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Certificates.WellKnownIssuerNames.Unknown">
            <summary>
            Creates a certificate that requires merging an external X.509 certificate using <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.MergeCertificateAsync(Azure.Security.KeyVault.Certificates.MergeCertificateOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Extensions.ToHexString(System.Byte[])">
            <summary>
            Return the hexadecimal representation of the <paramref name="source" /> byte array.
            </summary>
            <param name="source">The byte array to format.</param>
            <returns>The hexadecimal representation of the <paramref name="source" /> byte array, or <c>null</c> if <paramref name="source" /> is null.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestAsync(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param><returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequest(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestOnChallengeAsync(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestOnChallenge(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.AuthorizationUri">
            <summary>
            Gets the "authorization" or "authorization_uri" parameter from the challenge response.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.Scopes">
            <summary>
            Gets the "resource" or "scope" parameter from the challenge response. This should end with "/.default".
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.TenantId">
            <summary>
            Gets the tenant ID from <see cref="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.AuthorizationUri" />.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.KeyVaultPage`1">
            <summary>
            Defines a page in Azure responses.
            </summary>
            <typeparam name="T">Type of the page content items</typeparam>
        </member>
        <member name="P:Azure.Security.KeyVault.KeyVaultPage`1.Items">
            <summary>
            Gets the content items.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.KeyVaultPage`1.NextLink">
            <summary>
            Gets the link to the next page.
            </summary>
        </member>
        <member name="T:Azure.Core.LightweightPkcs8Decoder">
             <summary>
             This is a very targeted PKCS#8 decoder for use when reading a PKCS# encoded RSA private key from an
             DER encoded ASN.1 blob. In an ideal world, we would be able to call AsymmetricAlgorithm.ImportPkcs8PrivateKey
             off an RSA object to import the private key from a byte array, which we got from the PEM file. There
             are a few issues with this however:
            
             1. ImportPkcs8PrivateKey does not exist in the Desktop .NET Framework as of today.
             2. ImportPkcs8PrivateKey was added to .NET Core in 3.0, and we'd love to be able to support this
                on older versions of .NET Core.
            
             This code is able to decode RSA keys (without any attributes) from well formed PKCS#8 blobs.
             </summary>
        </member>
        <member name="T:Azure.Core.PemReader">
            <summary>
            Reads PEM streams to parse PEM fields or load certificates.
            </summary>
            <summary>
            Reads PEM streams to parse PEM fields or load certificates.
            </summary>
            <remarks>
            This class provides a downlevel PEM decoder since <c>PemEncoding</c> wasn't added until net5.0.
            The <c>PemEncoding</c> class takes advantage of other implementation changes in net5.0 and,
            based on conversations with the .NET team, runtime changes.
            </remarks>
        </member>
        <member name="M:Azure.Core.PemReader.LoadCertificate(System.ReadOnlySpan{System.Char},System.Byte[],Azure.Core.PemReader.KeyType,System.Boolean,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Loads an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from PEM data.
            </summary>
            <param name="data">The PEM data to parse.</param>
            <param name="cer">Optional public certificate data if not defined within the PEM data.</param>
            <param name="keyType">
            Optional <see cref="T:Azure.Core.PemReader.KeyType" /> of the certificate private key. The default is <see cref="F:Azure.Core.PemReader.KeyType.Auto" /> to automatically detect.
            Only support for <see cref="F:Azure.Core.PemReader.KeyType.RSA" /> is implemented by shared code.
            </param>
            <param name="allowCertificateOnly">Whether to create an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> if no private key is read.</param>
            <param name="keyStorageFlags">A combination of the enumeration values that control where and how to import the certificate.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> loaded from the PEM data.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic exception occurred when trying to create the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</exception>
            <exception cref="T:System.IO.InvalidDataException"><paramref name="cer" /> is null and no CERTIFICATE field is defined in PEM, or no PRIVATE KEY is defined in PEM.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="keyType" /> is not supported.</exception>
            <exception cref="T:System.PlatformNotSupportedException">Creating a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> from PEM data is not supported on the current platform.</exception>
        </member>
        <member name="M:Azure.Core.PemReader.TryRead(System.ReadOnlySpan{System.Char},Azure.Core.PemReader.PemField@)">
            <summary>
            Attempts to read the next PEM field from the given data.
            </summary>
            <param name="data">The PEM data to parse.</param>
            <param name="field">The PEM first complete PEM field that was found.</param>
            <returns>True if a valid PEM field was parsed; otherwise, false.</returns>
            <remarks>
            To find subsequent fields, pass a slice of <paramref name="data" /> past the found <see cref="P:Azure.Core.PemReader.PemField.Length" />.
            </remarks>
        </member>
        <member name="T:Azure.Core.PemReader.KeyType">
            <summary>
            Key type of the certificate private key.
            </summary>
        </member>
        <member name="F:Azure.Core.PemReader.KeyType.Unknown">
            <summary>
            The key type is unknown.
            </summary>
        </member>
        <member name="F:Azure.Core.PemReader.KeyType.Auto">
            <summary>
            Attempt to detect the key type.
            </summary>
        </member>
        <member name="F:Azure.Core.PemReader.KeyType.RSA">
            <summary>
            RSA key type.
            </summary>
        </member>
        <member name="F:Azure.Core.PemReader.KeyType.ECDsa">
            <summary>
            ECDsa key type.
            </summary>
        </member>
        <member name="T:Azure.Core.PemReader.PemField">
            <summary>
            A PEM field including its section header and encoded data.
            </summary>
        </member>
        <member name="P:Azure.Core.PemReader.PemField.Start">
            <summary>
            The offset of the section from the start of the input PEM stream.
            </summary>
        </member>
        <member name="P:Azure.Core.PemReader.PemField.Label">
            <summary>
            A span of the section label from within the PEM stream.
            </summary>
        </member>
        <member name="P:Azure.Core.PemReader.PemField.Data">
            <summary>
            A span of the section data from within the PEM stream.
            </summary>
        </member>
        <member name="P:Azure.Core.PemReader.PemField.Length">
            <summary>
            The length of the section from the <see cref="P:Azure.Core.PemReader.PemField.Start" />.
            </summary>
        </member>
        <member name="M:Azure.Core.PemReader.PemField.FromBase64Data">
            <summary>
            Decodes the base64-encoded <see cref="P:Azure.Core.PemReader.PemField.Data" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:Azure.Core.HashCodeBuilder">
            <summary>
            Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/HashCode.cs.
            </summary>
        </member>
        <member name="T:Azure.Core.AuthorizationChallengeParser">
            <summary>
            A helper class for parsing Authorization challenge headers.
            </summary>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.GetChallengeParameterFromResponse(Azure.Response,System.String,System.String)">
            <summary>
            Parses the specified parameter from a challenge hearder found in the specified <see cref="T:Azure.Response" />.
            </summary>
            <param name="response">The <see cref="T:Azure.Response" /> to parse.</param>
            <param name="challengeScheme">The challenge scheme containing the <paramref name="challengeParameter" />. For example: "Bearer"</param>
            <param name="challengeParameter">The parameter key name containing the value to return.</param>
            <returns>The value of the parameter name specified in <paramref name="challengeParameter" /> if it is found in the specified <paramref name="challengeScheme" />.</returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Iterates through the challenge schemes present in a challenge header.
            </summary>
            <param name="headerValue">
            The header value which will be sliced to remove the first parsed <paramref name="challengeKey" />.
            </param>
            <param name="challengeKey">The parsed challenge scheme.</param>
            <returns>
            <c>true</c> if a challenge scheme was successfully parsed.
            The value of <paramref name="headerValue" /> should be passed to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)" /> to parse the challenge parameters if <c>true</c>.
            </returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)">
            <summary>
            Iterates through a challenge header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.
            </summary>
            <param name="headerValue">The header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.</param>
            <param name="paramKey">The parsed challenge parameter key.</param>
            <param name="paramValue">The parsed challenge parameter value.</param>
            <param name="separator">The challenge parameter key / value pair separator. The default is '='.</param>
            <returns>
            <c>true</c> if the next available challenge parameter was successfully parsed.
            <c>false</c> if there are no more parameters for the current challenge scheme or an additional challenge scheme was encountered in the <paramref name="headerValue" />.
            The value of <paramref name="headerValue" /> should be passed again to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" /> to attempt to parse any additional challenge schemes if <c>false</c>.
            </returns>
        </member>
        <member name="M:Azure.Core.Base64Url.Decode(System.String)">
            <summary> Converts a Base64URL encoded string to a string.</summary>
            <param name="encoded">The Base64Url encoded string containing UTF8 bytes for a string.</param>
            <returns>The string represented by the Base64URL encoded string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.Encode(System.Byte[])">
            <summary>Encode a byte array as a Base64URL encoded string.</summary>
            <param name="bytes">Raw byte input buffer.</param>
            <returns>The bytes, encoded as a Base64URL string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.DecodeString(System.String)">
            <summary> Converts a Base64URL encoded string to a string.</summary>
            <param name="encoded">The Base64Url encoded string containing UTF8 bytes for a string.</param>
            <returns>The string represented by the Base64URL encoded string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.EncodeString(System.String)">
            <summary>Encode a string as a Base64URL encoded string.</summary>
            <param name="value">String input buffer.</param>
            <returns>The UTF8 bytes for the string, encoded as a Base64URL string.</returns>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.CallerShouldAuditAttribute">
            <summary>
            Decorates an operation or all operations for a client whose invocation should potentially be audited
            by Azure service implementations.  Auditing could be recommended
            because the operation changes critical service state, creates delegated
            access to a resource, affects data retention, etc.  It's a best guess
            from the service team that the operation should be audited to mitigate
            any potential future issues.
            </summary>
        </member>
        <member name="M:Azure.Core.CallerShouldAuditAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.CallerShouldAuditAttribute" />.
            </summary>
            <param name="reason"> Sets a description or link to the rationale for potentially auditing this operation. </param>
        </member>
        <member name="P:Azure.Core.CallerShouldAuditAttribute.Reason">
            <summary>
            Gets or sets a description or link to the rationale for potentially
            auditing this operation.
            </summary>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.AssertEnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not defined for <paramref name="enumType" />.
            </summary>
            <param name="enumType">The type to validate against.</param>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not defined for <paramref name="enumType" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.AddLink(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a link to the scope. This must be called before <see cref="M:Azure.Core.Pipeline.DiagnosticScope.Start" /> has been called for the DiagnosticScope.
            </summary>
            <param name="traceparent">The traceparent for the link.</param>
            <param name="tracestate">The tracestate for the link.</param>
            <param name="attributes">Optional attributes to associate with the link.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.SetTraceContext(System.String,System.String)">
            <summary>
            Sets the trace context for the current scope.
            </summary>
            <param name="traceparent">The trace parent to set for the current scope.</param>
            <param name="tracestate">The trace state to set for the current scope.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.Failed(System.Exception)">
            <summary>
            Marks the scope as failed.
            </summary>
            <param name="exception">The exception to associate with the failed scope.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.Failed(System.String)">
            <summary>
            Marks the scope as failed with low-cardinality error.type attribute.
            </summary>
            <param name="errorCode">Error code to associate with the failed scope.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until Activity Source is no longer considered experimental.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScopeFactory.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates diagnostic scope factory.
            </summary>
            <param name="clientNamespace">The namespace which is used as a prefix for all ActivitySources created by the factory and the name of DiagnosticSource (when used).</param>
            <param name="resourceProviderNamespace">Azure resource provider namespace.</param>
            <param name="isActivityEnabled">Flag indicating if distributed tracing is enabled.</param>
            <param name="suppressNestedClientActivities">Flag indicating if nested Azure SDK activities describing public API calls should be suppressed.</param>
            <param name="isStable">Whether instrumentation is considered stable. When false, experimental feature flag controls if tracing is enabled.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.FixedDelayWithNoJitterStrategy">
            <summary>
            A delay strategy that uses a fixed delay with no jitter applied. This is used by data plane LROs.
            </summary>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.IOperation,Azure.Core.Pipeline.ClientDiagnostics,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="rawResponse">
                The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
                <list type="bullet">
                    <item>
                        When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
                        In this case, the response received from this service call can be passed here.
                    </item>
                    <item>
                        When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
                    </item>
                </list>
            </param>
            <param name="operationTypeName">
                The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
                parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy"> The delay strategy to use. Default is <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback strategy
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback strategy
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.IOperation{`0},Azure.Core.Pipeline.ClientDiagnostics,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="rawResponse">
                The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
                <list type="bullet">
                    <item>
                        When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
                        In this case, the response received from this service call can be passed here.
                    </item>
                    <item>
                        When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
                    </item>
                </list>
            </param>
            <param name="operationTypeName">
                The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
                parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used.
                Default is <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />, which takes into account any retry-after header that is returned
            from the server.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.SequentialDelayStrategy">
            <summary>
            A delay strategy that uses a fixed sequence of delays with no jitter applied. This is used by management LROs.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Azure.CertificateClientBuilderExtensions">
            <summary>
            Extension methods to add <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" /> to clients builder.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.CertificateClientBuilderExtensions.AddCertificateClient``1(``0,System.Uri)">
            <summary>
            Registers a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" /> instance with the provided <paramref name="vaultUri" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.CertificateClientBuilderExtensions.AddCertificateClient``2(``0,``1)">
            <summary>
            Registers a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection" />.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection" />.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute" />. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" />
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId" />
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target" /> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId" /> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on a <see cref="T:System.Type" />.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type" /> containing <paramref name="memberSignature" />.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified types of members on a <see cref="T:System.Type" />.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type" /> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" /> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None" />, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" /> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" /> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None" />, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type" /> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" /> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" /> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName" /> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type" /> are accessed dynamically,
             for example through <see cref="N:System.Reflection" />.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type" /> or <see cref="T:System.String" />.
            
             When this attribute is applied to a location of type <see cref="T:System.String" />, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type" /> instances returned from calling
             <see cref="M:System.Object.GetType" /> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute" /> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" /> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
